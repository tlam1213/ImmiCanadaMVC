/*
Deployment script for ImmiCanada

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ImmiCanada"
:setvar DefaultFilePrefix "ImmiCanada"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Dropping unnamed constraint on [dbo].[ImmigrationService]...';


GO
ALTER TABLE [dbo].[ImmigrationService] DROP CONSTRAINT [FK__Immigratio__Type__2A4B4B5E];


GO
PRINT N'Dropping unnamed constraint on [dbo].[ImmigrationService]...';


GO
ALTER TABLE [dbo].[ImmigrationService] DROP CONSTRAINT [FK__Immigrati__Perma__29572725];


GO
PRINT N'Dropping unnamed constraint on [dbo].[ImmigrationService]...';


GO
ALTER TABLE [dbo].[ImmigrationService] DROP CONSTRAINT [FK__Immigrati__State__2D27B809];


GO
PRINT N'Starting rebuilding table [dbo].[ImmigrationServiceType]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_ImmigrationServiceType] (
    [Id]   INT            NOT NULL,
    [Name] NVARCHAR (200) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[ImmigrationServiceType])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_ImmigrationServiceType] ([Id], [Name])
        SELECT   [Id],
                 [Name]
        FROM     [dbo].[ImmigrationServiceType]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[ImmigrationServiceType];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_ImmigrationServiceType]', N'ImmigrationServiceType';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[PermanentResident]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_PermanentResident] (
    [Id]   INT            NOT NULL,
    [Name] NVARCHAR (200) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[PermanentResident])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_PermanentResident] ([Id], [Name])
        SELECT   [Id],
                 [Name]
        FROM     [dbo].[PermanentResident]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[PermanentResident];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_PermanentResident]', N'PermanentResident';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[State]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_State] (
    [Id]          INT            NOT NULL,
    [Name]        VARCHAR (200)  NULL,
    [Description] NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[State])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_State] ([Id], [Name], [Description])
        SELECT   [Id],
                 [Name],
                 [Description]
        FROM     [dbo].[State]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[State];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_State]', N'State';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[ImmigrationService]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_ImmigrationService] (
    [Id]                INT            IDENTITY (1, 1) NOT NULL,
    [Title]             NVARCHAR (200) NULL,
    [State]             INT            NULL,
    [PermanentResident] INT            NULL,
    [Fee]               NVARCHAR (200) NULL,
    [Time]              NVARCHAR (200) NULL,
    [Type]              INT            NULL,
    [CreatedDate]       DATETIME       NULL,
    [ModifiedDate]      DATETIME       NULL,
    [Overview]          NVARCHAR (MAX) NULL,
    [Description]       NVARCHAR (MAX) NULL,
    [Base64Image1]      VARCHAR (MAX)  NULL,
    [Base64Image2]      VARCHAR (MAX)  NULL,
    [Base64Image3]      VARCHAR (MAX)  NULL,
    [Base64Image4]      VARCHAR (MAX)  NULL,
    [Base64Image5]      VARCHAR (MAX)  NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_ImmigrationService1] PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[ImmigrationService])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ImmigrationService] ON;
        INSERT INTO [dbo].[tmp_ms_xx_ImmigrationService] ([Id], [Title], [State], [PermanentResident], [Fee], [Time], [Type], [CreatedDate], [ModifiedDate], [Overview], [Description], [Base64Image1], [Base64Image2], [Base64Image3], [Base64Image4], [Base64Image5])
        SELECT   [Id],
                 [Title],
                 [State],
                 [PermanentResident],
                 [Fee],
                 [Time],
                 [Type],
                 [CreatedDate],
                 [ModifiedDate],
                 [Overview],
                 [Description],
                 [Base64Image1],
                 [Base64Image2],
                 [Base64Image3],
                 [Base64Image4],
                 [Base64Image5]
        FROM     [dbo].[ImmigrationService]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ImmigrationService] OFF;
    END

DROP TABLE [dbo].[ImmigrationService];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_ImmigrationService]', N'ImmigrationService';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_ImmigrationService1]', N'PK_ImmigrationService', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating <unnamed>...';


GO
ALTER TABLE [dbo].[ImmigrationService] WITH NOCHECK
    ADD FOREIGN KEY ([Type]) REFERENCES [dbo].[ImmigrationServiceType] ([Id]);


GO
PRINT N'Creating <unnamed>...';


GO
ALTER TABLE [dbo].[ImmigrationService] WITH NOCHECK
    ADD FOREIGN KEY ([PermanentResident]) REFERENCES [dbo].[PermanentResident] ([Id]);


GO
PRINT N'Creating <unnamed>...';


GO
ALTER TABLE [dbo].[ImmigrationService] WITH NOCHECK
    ADD FOREIGN KEY ([State]) REFERENCES [dbo].[State] ([Id]);


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.ImmigrationService'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
